# kafka.bootstrap.server = localhost:9092
# kafka.bootstrap.server=my-cluster-kafka-bootstrap:9092
quarkus.application.name=cons-kafka-prod-mqtt
quarkus.otel.exporter.otlp.traces.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://jaeger-production-collector.tracing-system.svc.cluster.local:4317}
quarkus.openshift.env.vars.otel-exporter-otlp-endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://jaeger-production-collector.tracing-system.svc.cluster.local:4317}
quarkus.openshift.env.vars.otel-exporter-otlp-insecure=${OTEL_EXPORTER_OTLP_INSECURE:true}
quarkus.kubernetes-client.trust-certs=true
quarkus.s2i.base-jvm-image=registry.access.redhat.com/ubi9/openjdk-21
quarkus.openshift.deploy=true
# teste
kafka.topic=app.test.push
kafka.bootstrap.server=my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
mp.messaging.incoming.my-channel.connector=smallrye-kafka
mp.messaging.incoming.my-channel.bootstrap.servers=my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
mp.messaging.incoming.my-channel.topic=app.test.push
mp.messaging.incoming.my-channel.group.id=my-group
mp.messaging.incoming.my-channel.value.deserializer=org.acme.mqtt.MqttSendMessageDeserializerKafka
mp.messaging.incoming.my-channel.auto.offset.reset=earliest
mp.messaging.incoming.my-channel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
