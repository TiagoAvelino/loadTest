# kafka.bootstrap.server = localhost:9092
# kafka.bootstrap.server=my-cluster-kafka-bootstrap:9092
quarkus.application.name=cons-kafka-prod-mqtt
# quarkus.otel.exporter.otlp.traces.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://jaeger-production-collector.tracing-system.svc.cluster.local:4317}
# quarkus.openshift.env.vars.otel-exporter-otlp-endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://jaeger-production-collector.tracing-system.svc.cluster.local:4317}
# quarkus.openshift.env.vars.otel-exporter-otlp-insecure=${OTEL_EXPORTER_OTLP_INSECURE:true}
# quarkus.kubernetes-client.trust-certs=true
# quarkus.s2i.base-jvm-image=registry.access.redhat.com/ubi9/openjdk-21
# quarkus.openshift.deploy=true
# teste
###################################
# Kafka Consumer Configuration
###################################
# Using the SmallRye Kafka connector
mp.messaging.incoming."app.test.push".connector=smallrye-kafka
mp.messaging.incoming."app.test.push".topic=app.test.push
mp.messaging.incoming."app.test.push".pause-if-no-requests=false
mp.messaging.incoming."app.test.push".auto-commit-interval=5000
mp.messaging.incoming."app.test.push".bootstrap.servers=localhost:9092
# Key deserializer (string)
mp.messaging.incoming."app.test.push".max-pending-messages=5
mp.messaging.incoming."app.test.push".auto-commit-interval=10000
mp.messaging.incoming."app.test.push".key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming."app.test.push".value.deserializer=org.acme.mqtt.MqttSendMessageDeserializerKafka
mp.messaging.incoming."app.test.push".auto.offset.reset=earliest
quarkus.kafka.devservices.shared=true
quarkus.kafka.devservices.topic-partitions.app.test.push=3
quarkus.log.console.enable=true
quarkus.log.level=INFO
# quarkus.openshift.deploy=true
quarkus.http.port=8083
quarkus.openshift.env.vars.service=${SERVICE:tcp://localhost:1883}
###################################
# Custom Application Properties
###################################
# The Kafka topic used by the code
kafka.topic=app.test.push
# MQTT topic pattern: 
# %s will be replaced by the kafka.topic
# %s by the Kafka record key 
# For example: if kafka.topic=app.test.push and key=test 
# the final MQTT topic will be: "app.test.push/test"
mqtt.topic.pattern=%s/%s
kafka.consumer.max.poll.interval.ms=30000
# kafka.consumer.rebalance.timeout.ms=30000
